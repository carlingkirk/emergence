@using Emergence.Data.Shared.Search
@typeparam T
<div class="container">
    <div class="row">
        @foreach (var filter in Filters)
        {
        <div class="col-lg-4 col-xs">
            @if (filter.InputType == InputType.Boolean)
            {
                var boolFilter = filter as IBooleanFilter<T>;
                <label for="@boolFilter.Name.ToLower()">@boolFilter.Name</label>
                <input type="checkbox" name="@boolFilter.Name" @bind="boolFilter.Value" id="@boolFilter.Name.ToLower()" />
            }
            else if (filter.InputType == InputType.Select)
            {
                if (filter.FilterType == FilterType.String)
                {
                    var selectFilter = filter as ISelectFilter<T, string>;
                    <label for="@selectFilter.Name.ToLower()">@selectFilter.Name</label>
                    <select @bind="@selectFilter.Value" class="form-control" id="@selectFilter.Name.ToLower()">
                        @foreach (var value in selectFilter.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                }
                else if (filter.FilterType == FilterType.Integer)
                {
                    var selectFilter = filter as ISelectFilter<T, int>;
                    <label for="@selectFilter.Name.ToLower()">@selectFilter.Name</label>
                    <select @bind="@selectFilter.Value" class="form-control" id="@selectFilter.Name.ToLower()">
                        @foreach (var value in selectFilter.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                }
            }
            else if (filter.InputType == InputType.SelectRange)
            {
                if (filter.FilterType == FilterType.String)
                {
                    var stringRangeFilter = filter as ISelectRangeFilter<T, string>;
                    <label for="@stringRangeFilter.Name.ToLower()">Min @stringRangeFilter.Name</label>
                    <select @bind="@stringRangeFilter.MinimumValue" class="form-control" id="@stringRangeFilter.Name.ToLower()">
                        @foreach (var value in stringRangeFilter.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                    <label for="@stringRangeFilter.Name.ToLower()">Max @stringRangeFilter.Name</label>
                    <select @bind="@stringRangeFilter.MaximumValue" class="form-control" id="@stringRangeFilter.Name.ToLower()">
                        @foreach (var value in stringRangeFilter.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                }
                else if (filter.FilterType == FilterType.Integer)
                {
                    var numRangeFilter = filter as ISelectFilter<T, int>;
                    <label for="@numRangeFilter.Name.ToLower()">Min @numRangeFilter.Name</label>
                    <select @bind="@numRangeFilter.Value" class="form-control" id="@numRangeFilter.Name.ToLower()">
                        @foreach (var value in numRangeFilter.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                    <label for="@numRangeFilter.Name.ToLower()">Max @numRangeFilter.Name</label>
                    <select @bind="@numRangeFilter.Value" class="form-control" id="@numRangeFilter.Name.ToLower()">
                        @foreach (var value in numRangeFilter.Values)
                        {
                            <option value="@value">@value</option>
                        }
                    </select>
                }
            }
            else if (filter.InputType == InputType.Range)
            {

            }
        </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<IFilter<T>> Filters { get; set; }
}

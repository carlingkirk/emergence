@using Emergence.Data.Shared.Search

<div class="container">
    <div class="row">
        @foreach (var filter in Filters)
        {
        <div class="col-lg-4 col-xs">
            @if (filter.InputType == InputType.Select)
            {
                <div class="row">
                    <label for="@filter.Name.ToLower()">@filter.Name</label>
                </div>
                <div class="row">
                    <div class="col-lg-11 col-xs" style="padding: 0;">
                        @if (filter.FilterType == FilterType.String)
                        {
                            var selectFilter = (SelectFilter<string>)filter;
                            <select @bind="@selectFilter.Value" class="form-control" id="@selectFilter.Name.ToLower()">
                                @if (selectFilter is IFilterDisplay<string>)
                                {
                                    var enumStringFilter = (IFilterDisplay<string>)selectFilter;
                                    @foreach (var value in selectFilter.FacetValues)
                                    {
                                        <option value="@value">@(enumStringFilter.DisplayValue(value.Key, value.Value))</option>
                                    }
                                }
                                else
                                {
                                    @foreach (var value in selectFilter.FacetValues)
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        }
                        else if (filter.FilterType == FilterType.Integer)
                        {
                            var selectFilter = filter as SelectFilter<int>;
                            <select @bind="@selectFilter.Value" class="form-control" id="@selectFilter.Name.ToLower()">
                                @if (selectFilter is IFilterDisplay<int>)
                                {
                                    var displayIntFilter = (IFilterDisplay<int>)selectFilter;
                                    @foreach (var value in selectFilter.FacetValues)
                                    {
                                        <option value="@value">@(displayIntFilter.DisplayValue(value.Key, value.Value))</option>
                                    }
                                }
                                else
                                {
                                    @foreach (var value in selectFilter.FacetValues)
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        }
                    </div>
                </div>
            }
            else if (filter.InputType == InputType.SelectRange)
            {
                if (filter.FilterType == FilterType.String)
                {
                    var stringRangeFilter = filter as RangeFilter<string>;
                    <div class="row">
                        <label for="@stringRangeFilter.Name.ToLower()">Min @stringRangeFilter.Name</label>
                    </div>
                    <div class="row">
                        <div class="col-5 range-input">
                            <select @bind="@stringRangeFilter.MinimumValue" class="form-control" id="@stringRangeFilter.Name.ToLower()">
                                @if (stringRangeFilter is IFilterDisplay<string>)
                                {
                                    var enumStringFilter = (IFilterDisplay<string>)stringRangeFilter;
                                    @foreach (var value in stringRangeFilter.FacetValues)
                                    {
                                        <option value="@value">@(enumStringFilter.DisplayValue(value.Key, value.Value))</option>
                                    }
                                }
                                else
                                {
                                    @foreach (var value in stringRangeFilter.FacetValues)
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-1 range-separator">
                            <span>to</span>
                        </div>
                        <div class="col-5 range-input">
                            <select @bind="@stringRangeFilter.MaximumValue" class="form-control" id="@stringRangeFilter.Name.ToLower()">
                                @if (stringRangeFilter is IFilterDisplay<string>)
                                {
                                    var enumStringFilter = (IFilterDisplay<string>)stringRangeFilter;
                                    @foreach (var value in stringRangeFilter.FacetValues)
                                    {
                                        <option value="@value">@(enumStringFilter.DisplayValue(value.Key, value.Value))</option>
                                    }
                                }
                                else
                                {
                                    @foreach (var value in stringRangeFilter.FacetValues)
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                }
                else if (filter.FilterType == FilterType.Integer)
                {
                    var numRangeFilter = filter as RangeFilter<int>;
                    <div class="row">
                        <label for="@numRangeFilter.Name.ToLower()">Min @numRangeFilter.Name</label>
                    </div>
                    <div class="row">
                        <div class="col-5 range-input">
                            <select @bind="@numRangeFilter.MinimumValue" class="form-control" id="@numRangeFilter.Name.ToLower()">
                                @if (numRangeFilter is IFilterDisplay<int>)
                                {
                                    var displayIntFilter = (IFilterDisplay<int>)numRangeFilter;
                                    @foreach (var value in numRangeFilter.FacetValues)
                                    {
                                        <option value="@value">@(displayIntFilter.DisplayValue(value.Key, value.Value))</option>
                                    }
                                }
                                else
                                {
                                    @foreach (var value in numRangeFilter.FacetValues)
                                    {
                                        <option value="@value">@value</option>
                                    }
                                }
                            </select>
                        </div>
                    <div class="col-1 range-separator">
                        <span>to</span>
                    </div>
                    <div class="col-5 range-input">
                        <select @bind="@numRangeFilter.MaximumValue" class="form-control" id="@numRangeFilter.Name.ToLower()">
                            @if (numRangeFilter is IFilterDisplay<int>)
                            {
                                var displayIntFilter = (IFilterDisplay<int>)numRangeFilter;
                                @foreach (var value in numRangeFilter.FacetValues)
                                {
                                    <option value="@value">@(displayIntFilter.DisplayValue(value.Key, value.Value))</option>
                                }
                            }
                            else
                            {
                                @foreach (var value in numRangeFilter.FacetValues)
                                {
                                    <option value="@value">@value</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                }
                else if (filter.FilterType == FilterType.Double)
                {
                    var numRangeFilter = filter as RangeFilter<double?>;
                    <div class="row">
                        <label for="@numRangeFilter.Name.ToLower()">Min @numRangeFilter.Name</label>
                    </div>
                    <div class="row">
                        <div class="col-5 range-input">
                            <select @bind="@numRangeFilter.MinimumValue" class="form-control" id="@numRangeFilter.Name.ToLower()">
                                @foreach (var value in numRangeFilter.FacetValues)
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        </div>
                        <div class="col-1 range-separator">
                            <span>to</span>
                        </div>
                        <div class="col-5 range-input">
                            <select @bind="@numRangeFilter.MaximumValue" class="form-control" id="@numRangeFilter.Name.ToLower()">
                                @foreach (var value in numRangeFilter.FacetValues)
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        </div>
                    </div>
                }
            }
            else if (filter.InputType == InputType.Range)
            {

            }
        </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<Filter> Filters { get; set; }
}

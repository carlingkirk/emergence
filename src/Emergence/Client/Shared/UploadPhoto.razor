@using BlazorInputFile
@using Emergence.Data.Shared
@using Emergence.Data.Shared.Models
@inject IModalServiceClient ModalServiceClient
@inherits EmergenceComponent

@if (UploadedPhotos != null)
{
<div class="row">
    <div class="col-6">
        <label for="photos">Photos</label>
        <BlazorInputFile.InputFile OnChange="UploadPhotosAsync" multiple capture="camera" accept="image/*" class="form-control" style="border: 0; padding: .25em 0;"></BlazorInputFile.InputFile>
    </div>
</div>
<div class="row">
    @foreach (var photo in UploadedPhotos)
    {
        <div class="col-lg-2 col-xs">
            <div class="col">
                <a href="" @onclick="async () => await ModalServiceClient.ShowPhotoModal(photo, Name)" @onclick:preventDefault>
                    <img srcset="@(photo.LargeUri) 3x, @(photo.MediumUri) 2x, @(photo.ThumbnailUri) 1x" src="@(photo.OriginalUri)"
                            onerror="this.onerror=null;this.srcset='';this.src='@(photo.OriginalUri)'" alt="Uploaded photo of @(photo.Type)"
                            style="max-width:300px;" />
                </a>
            </div>
            <div class="col">
                <button type="button" class="btn btn-sm btn-secondary" style="margin-top:.25rem;" @onclick="async () => await RemovePhotoAsync(photo.PhotoId)">Remove</button>
            </div>
        </div>
    }
</div>
}

@code {
    [Parameter]
    public PhotoType PhotoType { get; set; }
    [Parameter]
    public List<Photo> UploadedPhotos { get; set; }
    [Parameter]
    public EventCallback<List<Photo>> UploadedPhotosChanged { get; set; }
    [Parameter]
    public string Name { get; set; }

    protected async Task UploadPhotosAsync(IFileListEntry[] files)
    {
        var photos = await ApiClient.UploadPhotosAsync(files, PhotoType);
        UploadedPhotos.AddRange(photos.ToList());
        await UploadedPhotosChanged.InvokeAsync(UploadedPhotos);
    }

    protected async Task UploadPhotoAsync(IFileListEntry[] files)
    {
        var photo = await ApiClient.UploadPhotoAsync(files.First(), PhotoType);
        UploadedPhotos.Add(photo);
        await UploadedPhotosChanged.InvokeAsync(UploadedPhotos);
    }

    protected async Task RemovePhotoAsync(int id)
    {
        var photo = UploadedPhotos.First(p => p.PhotoId == id);
        var result = await ApiClient.RemovePhotoAsync(photo.PhotoId);
        if (result)
        {
            UploadedPhotos.Remove(photo);
        }
        await UploadedPhotosChanged.InvokeAsync(UploadedPhotos);
    }
}

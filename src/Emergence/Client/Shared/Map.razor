@page "/map"
@using Emergence.Data.Shared.Models
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Service.Geolocation;
@inject IGeolocationService GeolocationService

<h1>Google Map</h1>

@if (_mapOptions != null)
{
    <GoogleMap @ref="@_map" Id="map" Options="@_mapOptions" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
}

@if (_markers != null && _markers.Any())
{
    foreach (var marker in _markers)
    {
        <span>@(marker.Key.LatLong)</span>
    }
}

@functions {
    private GoogleMap _map;
    private MapOptions _mapOptions;
    private Marker _marker;
    private Dictionary<Location, Marker> _markers = new Dictionary<Location, Marker>();


    protected override async Task OnInitializedAsync()
    {
        var currentPosition = await GeolocationService.GetCurrentPositionAsync();

        _mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = currentPosition.Coords.Latitude,
                Lng = currentPosition.Coords.Longitude
            },
            MapTypeId = MapTypeId.Terrain
        };
    }

    private async Task OnAfterInitAsync()
    {
        _marker = await Marker.CreateAsync(_map.JsRuntime, new MarkerOptions
        {
            Position = await _map.InteropObject.GetCenter(),
            Map = _map.InteropObject,
            Clickable = true,
            Draggable = true
        });

        await _map.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
    }

    private async Task OnClick(MouseEvent e)
    {
        var marker = await Marker.CreateAsync(_map.JsRuntime, new MarkerOptions
        {
            Position = e.LatLng,
            Map = _map.InteropObject,
            Clickable = true,
            Draggable = true
        });

        _markers.Add(new Location { Latitude = e.LatLng.Lat, Longitude = e.LatLng.Lng }, marker);

        StateHasChanged();

        await e.Stop();
    }
}

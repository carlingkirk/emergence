@page "/activity/edit/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Emergence.Data.Shared.Models
@using Emergence.Client.Components
@using Emergence.Data.Shared.Extensions
@using Blazored.Typeahead
@inject IModalService ModalService
@attribute [Authorize]
@inherits EditActivityComponent

@if (Activity != null)
{
<EditForm Model="@Activity">
    <h3>Edit Activity</h3>
    <div class="form-group container">
        <div class="row">
            <div class="col-3">
                <label for="name">Name</label>
                <input @bind="@Activity.Name" type="text" class="form-control" id="name" />
            </div>
            <div class="col-3">
                <label for="type">Type</label>
                <select @bind="@Activity.ActivityType" type="text" class="form-control" id="type">
                    @foreach (var type in ActivityTypes)
                    {
                        <option value="@type">@type.ToFriendlyName()</option>
                    }
                </select>
            </div>
            <div class="col">
                <label for="specimen">Specimen</label>
                <BlazoredTypeahead SearchMethod="FindSpecimens"
                                    @bind-Value="SelectedSpecimen"
                                    MinimumLength="3"
                                    Debounce="500" Context="specimen">
                    <SelectedTemplate>
                        @(specimen.InventoryItem?.Name ?? specimen.Lifeform?.ScientificName ?? specimen.SpecimenId.ToString())
                    </SelectedTemplate>
                    <ResultTemplate>
                        @if (specimen.SpecimenId == 0 && specimen.Lifeform != null)
                        {
                            <a href="" @onclick="@(async () => { await AddSpecimen((Specimen)specimen); })" @onclick:preventDefault>
                                <span>Add new </span>
                                <span class="text-body">@(specimen.Lifeform.CommonName) </span>
                                <span class="text-body font-italic">@(specimen.Lifeform.ScientificName) </span>
                            </a>
                        }
                        else if (specimen.InventoryItem != null)
                        {
                            <span>@(specimen.InventoryItem?.Name)</span> <span>@(specimen.SpecimenStage.ToFriendlyName())</span> <span>@(specimen.InventoryItem?.Status.ToFriendlyName())</span>
                        }
                        else // this won't happen?
                        {
                            <span>@specimen.SpecimenId.ToString();</span>
                        }
                    </ResultTemplate>
                    <NotFoundTemplate>
                        No results found
                    </NotFoundTemplate>
                </BlazoredTypeahead>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="description">Description</label>
                <textarea @bind="@Activity.Description" type="text" class="form-control" id="description" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="date-occured">Date Occured</label>
                <input @bind="@Activity.DateOccured" type="date" class="form-control" id="date-occured" />
            </div>
            <div class="col">
                <label for="date-scheduled">Date Scheduled</label>
                <input @bind="@Activity.DateScheduled" type="date" class="form-control" id="date-scheduled" />
            </div>
        </div>
    </div>

    <button @onclick="(async () => await SaveActivity())" class="btn btn-primary">Submit</button>
    @if (BlazoredModal != null)
    {
        <button @onclick="BlazoredModal.Cancel" class="btn btn-secondary">Cancel</button>
    }
</EditForm>
}
else
{
    <span>Loading...</span>
}

@code {
    async Task AddSpecimen(Specimen specimen)
    {
        var modalParams = new ModalParameters();
        modalParams.Add("Id", specimen.SpecimenId);
        modalParams.Add("SpecimenParam", specimen);
        var specimenModal = ModalService.Show<EditSpecimen>("", modalParams);
        var result = await specimenModal.Result;
        SelectedSpecimen = (Specimen)result.Data;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Console.WriteLine("Modal was closed");
        }
    }
}

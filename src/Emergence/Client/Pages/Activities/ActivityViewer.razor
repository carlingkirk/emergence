@page "/activity/{Id:int}"
@using Emergence.Client.Components

@inherits ActivityComponent

<div class="card-header h3">
    @if (!IsModal)
    {
        <button type="button" class="btn btn-primary" @onclick="Back">Back</button>
    }
    <span class="title">Activity: </span>
    @if (Activity != null)
    {
        <span class="font-italic">@(Activity.ActivityId != 0 ? Activity?.Name ?? "(No name)" : "New")</span>
    }
</div>
<div class="group">
    @if (IsEditing && Activity != null)
    {
        if (RefreshList != null)
        {
            <EditActivity Cancel="GoBack" RefreshList="RefreshList" Activity="Activity" @bind-IsEditing="IsEditing" @bind-IsItemLoaded="IsItemLoaded" SelectedSpecimen="SelectedSpecimen" @bind-List="List" />
        }
        else
        {
            <EditActivity Cancel="GoBack" Activity="Activity" @bind-IsEditing="IsEditing" @bind-IsItemLoaded="IsItemLoaded" SelectedSpecimen="SelectedSpecimen" />
        }
    }
    else if (Activity != null)
    {
        <ViewActivity Activity="Activity" @bind-IsEditing="IsEditing" @bind-IsItemLoaded="IsItemLoaded" />
    }
    else
    {
        <span>Loading...</span>
    }
    @if (IsEditable && !IsEditing && Activity != null && Activity.ActivityId > 0)
    {
        <button type="button" class="btn btn-primary" @onclick="() => IsEditing = true">Edit</button>
        <button type="button" class="btn btn-primary" @onclick="async () => await RemoveActivity()">Delete</button>
    }
</div>

@code {

    protected async Task GoBack()
    {
        if (Activity.ActivityId == 0)
        {
            await IsItemLoadedChanged.InvokeAsync(false);
        }
    }

    protected bool IsEditable => !string.IsNullOrEmpty(UserId) && (Activity?.CreatedBy == UserId);
}

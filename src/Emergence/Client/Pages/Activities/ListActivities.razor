@page "/activity/list"
@using Emergence.Client.Components
@using Emergence.Client.Pages.Specimens
@using Emergence.Data.Shared.Extensions
@inherits ListActivitiesComponent

@if (!IsItemLoaded)
{
<form @onsubmit="SearchAsync">
    @if (ShowSearch)
    {
        <input type="text" @bind="SearchText" id="search" />
        <button class="btn btn-primary" type="submit">Search</button>
        <input type="checkbox" class="check-lg" @bind="ShowPublic" id="show-public" />
        <label for="show-public">Show Public</label>
    }
    <input type="checkbox" class="check-lg" @bind="ListView" id="list-view" />
    <label for="list-view">List View</label>

    @if (List != null)
    {
        @if (ListView)
        {
            <table>
                <SortableHeaders HeaderNames="@Headers" Sort="SortAsync" @bind-Values="List" />
                @if (!List.Any())
                {
                    <tr><td><span>No activities found</span></td></tr>
                }
                @foreach (var activity in List)
                {
                    <tr>
                        <td>
                            <a href="" @onclick="() => LoadInfo(ViewItemType.Activity, activity.ActivityId)" @onclick:preventDefault><span class="link">@(activity.Name ?? "(No name)")</span></a>
                        </td>
                        <td>
                            @if (LinkRelations)
                            {
                                <span @onclick="@(() => LoadInfo(ViewItemType.Specimen, activity.Specimen.SpecimenId))" class="link">@activity.Specimen?.Lifeform?.ScientificName</span>
                            }
                            else
                            {
                                <span>@activity.Specimen?.Lifeform?.ScientificName</span>
                            }
                        </td>
                        <td>
                            <span>@activity.ActivityType.ToFriendlyName()</span>
                        </td>
                        <td>
                            <span>
                                @(activity.DateOccurred.HasValue ? activity.DateOccurred.Value.ToLocalTime().ToShortDateString() : "")
                            </span>
                        </td>
                        <td>
                            <span>
                                @(activity.DateScheduled.HasValue ? activity.DateScheduled.Value.ToLocalTime().ToShortDateString() : "")
                            </span>
                        </td>
                    </tr>
                }
            </table>
        }
        else
        {
        <div class="container">
            <div class="row">
                @if (!List.Any())
                {
                    <span>No activities found</span>
                }
                @foreach (var activity in List)
                {
                    var photo = activity.Photos?.FirstOrDefault();

                    <Card Name="@activity.Name" ColorSearch="@activity.Specimen.Lifeform.CommonName" Photo="@photo">
                        <Content>
                            <div class="col-12">
                                <a href="" @onclick="() => LoadInfo(ViewItemType.Activity, activity.ActivityId)" @onclick:preventDefault>
                                <span class="link">@(activity.Name ?? "(No name)")</span>
                                </a>
                            </div>
                            @if (!activity.Name.Contains(activity.Specimen.Lifeform.ScientificName))
                            {
                            <div class="col-12">
                                <span>@activity.Specimen?.Lifeform?.ScientificName</span>
                            </div>
                            }
                            <div class="col-12">
                                @if (!activity.Name.Contains(activity.ActivityType.ToFriendlyName()))
                                {
                                    <span>@activity.ActivityType.ToFriendlyName()</span>
                                }
                                <span>@(activity.DisplayDate.HasValue ? " on " +  activity.DisplayDate.Value.ToLocalTime().ToShortDateString() : "")</span>
                            </div>
                            <div class="col-12">
                                <span>by @activity.User.DisplayName</span>
                            </div>
                        </Content>
                    </Card>
                }
            </div>
        </div>
        }
        <div>
            @if (List.Any())
            {
                <Pager Page="PageAsync" @bind-Values="List" Count="@Count" Take="@Take" CurrentPage="@CurrentPage"></Pager>
            }
            @if (!string.IsNullOrEmpty(UserId))
            {
                <button type="button" class="btn btn-primary" @onclick="@(() => LoadInfo(ViewItemType.Activity, 0))"><span class="oi oi-plus btn-oi"></span>Activity</button>
            }
        </div>
    }
</form>
}
else if (Id > 0 || IsItemLoaded)
{
    switch (ViewItemType)
    {
        case (ViewItemType.Activity):
            <ActivityViewer RefreshList="RefreshAsync" @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" SelectedSpecimen="Specimen" @bind-List="List"></ActivityViewer>
            break;
        case (ViewItemType.Specimen):
            <SpecimenViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" />
            break;
        default:
            break;
    }
}

@page "/activity/list"
@using Emergence.Client.Components
@using Emergence.Client.Pages.Specimens
@using Emergence.Data.Shared.Extensions
@inherits ListActivitiesComponent

@if (!IsItemLoaded)
{
<form @onsubmit="SearchAsync">
    @if (ShowSearch)
    {
        <input type="text" @bind="SearchText" id="search" />
        <button class="btn btn-primary" type="submit">Search</button>
        <input type="checkbox" class="check-lg" @bind="ShowPublic" id="show-public" />
        <label for="show-public">Show Public</label>
    }

    @if (List != null)
    {
        <table>
            <SortableHeaders HeaderNames="@(
                                new Dictionary<string, string>
                                {
                                    { "Name", "Name" },
                                    { "ScientificName", "Scientific Name" },
                                    { "ActivityType", "Activity Type" },
                                    { "DateOccured", "Date Occured" },
                                    { "DateScheduled", "Date Scheduled" }
                                })"
                             Sort="SortAsync"
                             @bind-Values="List" />
            @if (!List.Any())
            {
                <tr>
                    <td>
                        <span>No activities found</span>
                    </td>
                </tr>
            }
            @foreach (var activity in List)
            {
                <tr>
                    <td>
                        <a href="" @onclick="() => LoadInfo(ViewItemType.Activity, activity.ActivityId)" @onclick:preventDefault><span class="link">@(activity.Name ?? "(No name)")</span></a>
                    </td>
                    <td>
                        @if (LinkRelations)
                        {
                            <span @onclick="@(() => LoadInfo(ViewItemType.Specimen, activity.Specimen.SpecimenId))" class="link">@activity.Specimen?.Lifeform?.ScientificName</span>
                        }
                        else
                        {
                            <span>@activity.Specimen?.Lifeform?.ScientificName</span>
                        }
                    </td>
                    <td>
                        <span>@activity.ActivityType.ToFriendlyName()</span>
                    </td>
                    <td>
                        <span>
                            @(activity.DateOccurred.HasValue ?
                        activity.DateOccurred.Value.ToLocalTime().ToShortDateString() : "")
                        </span>
                    </td>
                    <td>
                        <span>
                            @(activity.DateScheduled.HasValue ?
                        activity.DateScheduled.Value.ToLocalTime().ToShortDateString() : "")
                        </span>
                    </td>
                </tr>
            }
        </table>
        <div>
            @if (List.Any())
            {
                <Pager Page="PageAsync" @bind-Values="List" Count="@Count" Take="@Take" CurrentPage="@CurrentPage"></Pager>
            }
            @if (!string.IsNullOrEmpty(UserId))
            {
                <button type="button" class="btn btn-primary" @onclick="@(() => LoadInfo(ViewItemType.Activity, 0))"><span class="oi oi-plus btn-oi"></span>Activity</button>
            }
        </div>
    }
</form>
}
else if (Id > 0 || IsItemLoaded)
{
    switch (ViewItemType)
    {
        case (ViewItemType.Activity):
            <ActivityViewer RefreshList="RefreshAsync" @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" SelectedSpecimen="Specimen" @bind-List="List"></ActivityViewer>
            break;
        case (ViewItemType.Specimen):
            <SpecimenViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" />
            break;
        default:
            break;
    }
}

@page "/specimen/list"
@using Emergence.Client.Components
@using Emergence.Client.Pages.Activities
@using Emergence.Client.Pages.Origins
@using Emergence.Data.Shared.Extensions
@inherits ListSpecimensComponent

@if (!IsItemLoaded)
{
<form @onsubmit="SearchAsync">
    @if (ShowSearch)
    {
        <input type="text" @bind="SearchText" id="search" />
        <button class="btn btn-primary" type="submit">Search</button>
        @if (string.IsNullOrEmpty(ForUserId))
        {
            <input type="checkbox" class="check-lg" @bind="ShowPublic" id="show-public" />
            <label for="show-public">Show Public</label>
        }
    }
    <input type="checkbox" class="check-lg" @bind="ListView" id="list-view" />
    <label for="list-view">List View</label>
    @if (List != null)
    {
        @if (ListView)
        {
            <table>
                <SortableHeaders HeaderNames="@(
                new Dictionary<string, string>
                {
                            { "ScientificName", "Scientific Name" },
                            { "CommonName", "Common Name" },
                            { "Quantity", "Quantity" },
                            { "Stage", "Growth Stage" },
                            { "Status", "Status" },
                            { "DateAcquired", "Date Acquired" },
                            { "Origin", "Origin" },
                            { "", "" }
                })"
                                 Sort="SortAsync"
                                 @bind-Values="List" @bind-SortBy="SortBy" @bind-SortDirection="SortDirection" />
                @if (!List.Any())
                {
                    <tr>
                        <td>
                            <span>No specimens found</span>
                        </td>
                    </tr>
                }
                @foreach (var specimen in List)
                {
                    <tr>
                        <td>
                            <a href="" @onclick="() => LoadInfo(ViewItemType.Specimen, specimen.SpecimenId)" @onclick:preventDefault><span class="link">@specimen.Lifeform.ScientificName</span></a>
                        </td>
                        <td>
                            <span>@specimen.Lifeform.CommonName</span>
                        </td>
                        <td>
                            <span>@specimen.InventoryItem.Quantity</span>
                        </td>
                        <td>
                            <span>@specimen.SpecimenStage.ToFriendlyName()</span>
                        </td>
                        <td>
                            <span>@specimen.InventoryItem.Status.ToFriendlyName()</span>
                        </td>
                        <td>
                            <span>
                                @(specimen.InventoryItem.DateAcquired.HasValue ? specimen.InventoryItem.DateAcquired.Value.ToLocalTime().ToShortDateString() : "")
                            </span>
                        </td>
                        <td>
                            @if (specimen.InventoryItem?.Origin != null)
                            {
                                <span @onclick="@(() => LoadInfo(ViewItemType.Origin, specimen.InventoryItem.Origin.OriginId))" class="link">@(specimen.InventoryItem.Origin != null ? specimen.InventoryItem.Origin?.Name ?? "(No name)" : null)</span>
                            }
                            else
                            {
                                <span></span>
                            }
                        </td>
                        @if (string.IsNullOrEmpty(ForUserId))
                        {
                            <td>
                                <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => LoadInfo(ViewItemType.Activity, 0, specimen))"><span class="oi oi-plus btn-oi"></span>Activity</button>
                            </td>
                        }
                    </tr>
                }
            </table>
        }
        else
        {
            <div class="container">
                <div class="row">
                    @if (!List.Any())
                    {
                        <span>No specimens found</span>
                    }
                    @foreach (var specimen in List)
                    {
                        var photo = specimen.Photos?.FirstOrDefault();
                        
                        <Card Name="@specimen.Lifeform.ScientificName" ColorSearch="@specimen.Lifeform.CommonName" Photo="@photo">
                            <Content>
                                <div class="col-12">
                                    <a href="" @onclick="() => LoadInfo(ViewItemType.Specimen, specimen.SpecimenId)" @onclick:preventDefault>
                                        <span class="link">@specimen.Lifeform.CommonName</span>
                                    </a>
                                </div>
                                <div class="col-12">
                                    <a href="" @onclick="() => LoadInfo(ViewItemType.Specimen, specimen.SpecimenId)" @onclick:preventDefault>
                                        <span style="font-style:italic">@specimen.Lifeform.ScientificName</span>
                                    </a>
                                </div>
                                <div class="col-12">
                                    <span>@specimen.InventoryItem.Quantity</span>
                                    <span>@specimen.SpecimenStage.ToFriendlyName()</span>
                                </div>
                                <div class="col-12">
                                    <span>by @specimen.InventoryItem.User.DisplayName</span>
                                </div>
                            </Content>
                        </Card>
                    }
                </div>
            </div>
        }
        <div>
            @if (List.Any())
            {
                <Pager Page="PageAsync" @bind-Values="List" Count="@Count" Take="@Take" CurrentPage="@CurrentPage"></Pager>
            }
            @if (!string.IsNullOrEmpty(UserId) && string.IsNullOrEmpty(ForUserId))
            {
                <button type="button" class="btn btn-primary" @onclick="@(() => LoadInfo(ViewItemType.Specimen, 0))"><span class="oi oi-plus btn-oi"></span>Specimen</button>
            }
        </div>
    }
</form>
}
else if (Id > 0 || IsItemLoaded)
{
    switch (ViewItemType)
    {
        case (ViewItemType.Activity):
            <ActivityViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" SelectedSpecimen="Parent"></ActivityViewer>
            break;
        case (ViewItemType.Specimen):
            <SpecimenViewer RefreshList="RefreshAsync" @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" @bind-List="List"></SpecimenViewer>
            break;
        case (ViewItemType.Origin):
            <OriginViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" />
            break;
        default:
            break;
    }
}

@code {

}

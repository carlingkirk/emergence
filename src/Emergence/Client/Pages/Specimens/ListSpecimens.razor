@page "/specimen/list"
@using Emergence.Client.Components
@using Emergence.Client.Pages.Activities
@using Emergence.Client.Pages.Origins
@using Emergence.Client.Pages.Specimens
@using Emergence.Data.Shared.Extensions
@inherits ListSpecimensComponent

@if (!IsItemLoaded)
{
    @if (ShowSearch)
    {
        <input type="text" @bind="SearchText" id="search" />
        <button class="btn btn-secondary" @onclick="SearchAsync">Search</button>
    }

    @if (List != null)
    {
        <table>
            <SortableHeaders HeaderNames="@(
                new Dictionary<string, string>
                {
                            { "ScientificName", "Scientific Name" },
                            { "CommonName", "Common Name" },
                            { "Quantity", "Quantity" },
                            { "Stage", "Growth Stage" },
                            { "Status", "Status" },
                            { "DateAcquired", "Date Acquired" },
                            { "Origin", "Origin" },
                            { "", "" }
                })"
                             Sort="SortAsync"
                             @bind-Values="List" @bind-SortBy="SortBy" @bind-SortDirection="SortDirection" />
            @if (!List.Any())
            {
                <tr>
                    <td>
                        <span>No specimens found</span>
                    </td>
                </tr>
            }
            @foreach (var specimen in List)
            {
                <tr>
                    <td>
                        <a href="" @onclick="() => LoadInfo(ViewItemType.Specimen, specimen.SpecimenId)" @onclick:preventDefault><span class="link">@specimen.Lifeform.ScientificName</span></a>
                    </td>
                    <td>
                        <span>@specimen.Lifeform.CommonName</span>
                    </td>
                    <td>
                        <span>@specimen.InventoryItem.Quantity</span>
                    </td>
                    <td>
                        <span>@specimen.SpecimenStage.ToFriendlyName()</span>
                    </td>
                    <td>
                        <span>@specimen.InventoryItem.Status.ToFriendlyName()</span>
                    </td>
                    <td>
                        <span>
                            @(specimen.InventoryItem.DateAcquired.HasValue ?
                          specimen.InventoryItem.DateAcquired.Value.ToLocalTime().ToShortDateString() : "")
                        </span>
                    </td>
                    <td>
                        @if (specimen.InventoryItem?.Origin != null)
                        {
                            <span @onclick="@(() => LoadInfo(ViewItemType.Origin, specimen.InventoryItem.Origin.OriginId))" class="link">@specimen.InventoryItem?.Origin?.Name</span>
                        }
                        else
                        {
                            <span></span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => LoadInfo(ViewItemType.Activity, 0, specimen))"><span class="oi oi-plus btn-oi"></span>Activity</button>
                    </td>
                </tr>
            }
        </table>
        <div>
            @if (List.Any())
            {
                <Pager Page="PageAsync" @bind-Values="List" Count="@Count" Take="@Take" CurrentPage="@CurrentPage"></Pager>
            }
            @if (!string.IsNullOrEmpty(UserId))
            {
                <button class="btn btn-primary" @onclick="@(() => LoadInfo(ViewItemType.Specimen, 0))"><span class="oi oi-plus btn-oi"></span>Specimen</button>
            }
        </div>
    }
}
else if (Id > 0 || IsItemLoaded)
{
    switch (ViewItemType)
    {
        case (ViewItemType.Activity):
            <ActivityViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" SelectedSpecimen="Parent"></ActivityViewer>
            break;
        case (ViewItemType.Specimen):
            <SpecimenViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded"></SpecimenViewer>
            break;
        case (ViewItemType.Origin):
            <OriginViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded" />
            break;
        default:
            break;
    }
}

@code {

}

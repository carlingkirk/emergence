@page "/plantinfo/view/{Id:int}"
@using Emergence.Data.Shared
@using Emergence.Data.Shared.Models
@using Emergence.Client.Components
@using Emergence.Data.Shared.Extensions
@inject IModalServiceClient ModalServiceClient

@inherits PlantInfoComponent

@if (PlantInfo != null)
{
    <div class="form-group">
        <div class="row">
            <div class="col-lg-4 col-xs">
                <div>
                    <label for="lifeform">Plant Name </label>
                </div>
                <div>
                    <span class="text-body">@(PlantInfo.Lifeform.CommonName)</span>&nbsp;<span class="text-body font-italic">@(PlantInfo.Lifeform.ScientificName)</span>
                </div>
                @if (PlantInfo.Taxon != null)
                {
                    <div>
                        <label for="botanical-name">Botanical Name </label>
                    </div>
                    <div>
                        <span class="text-body font-italic">@(PlantInfo.Taxon.SpeciesName)</span>
                        @if (!string.IsNullOrEmpty(PlantInfo.Taxon.Subspecies))
                        {
                            <span> ssp. </span><span class="text-body font-italic">@(PlantInfo.Taxon.Subspecies)</span>
                        }
                        else if (!string.IsNullOrEmpty(PlantInfo.Taxon.Variety))
                        {
                            <span> var. </span><span class="text-body font-italic">@(PlantInfo.Taxon.Variety)</span>
                        }
                        else if (!string.IsNullOrEmpty(PlantInfo.Taxon.Subvariety))
                        {
                            <span> subvar. </span><span class="text-body font-italic">@(PlantInfo.Taxon.Subvariety)</span>
                        }
                        else if (!string.IsNullOrEmpty(PlantInfo.Taxon.Form))
                        {
                            <span> f. </span><span class="text-body font-italic">@(PlantInfo.Taxon.Form)</span>
                        }
                    </div>
                }
            </div>
            <div class="col-lg-4 col-xs">
                <div>
                    <label for="origin">Origin</label>
                </div>
                <div>
                    <span class="link" @onclick="async () => await ModalServiceClient.ShowOriginModal(PlantInfo.Origin)">@(PlantInfo.Origin != null && PlantInfo.Origin.OriginId > 0 ? PlantInfo.Origin?.Name ?? "(No name)" : null)</span>
                </div>
                <div>
                    <a href="@PlantInfo.Origin?.Uri" target="_blank" alt="@PlantInfo.Origin?.Uri"><span class="link">@PlantInfo.Origin?.ShortUri</span></a>
                </div>
            </div>
            
            <div class="col-lg-4 col-xs">
                @if (!string.IsNullOrEmpty(PlantInfo.User?.DisplayName))
                {
                    <UserDisplay Label="By" User="PlantInfo.User" />
                }
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-lg-3 col-4">
                @if (PlantInfo.Requirements.LightRequirements.MinimumLight != LightType.Unknown || PlantInfo.Requirements.LightRequirements.MaximumLight != LightType.Unknown)
                {
                    <div><label for="light">Light</label></div>
                    <div>
                        <span id="light">
                            @DisplayRange(PlantInfo.Requirements.LightRequirements.MinimumLight.ToFriendlyName(),
                                            PlantInfo.Requirements.LightRequirements.MaximumLight.ToFriendlyName())
                        </span>
                    </div>
                }
            </div>
            <div class="col-lg-3 col-4">
                @if (PlantInfo.Requirements.WaterRequirements.MinimumWater != WaterType.Unknown || PlantInfo.Requirements.WaterRequirements.MaximumWater != WaterType.Unknown)
                {
                    <div>
                        <label for="water">Water</label>
                    </div>
                    <div>
                        <span id="water">
                            @DisplayRange(PlantInfo.Requirements.WaterRequirements.MinimumWater.ToFriendlyName(),
                                            PlantInfo.Requirements.WaterRequirements.MaximumWater.ToFriendlyName())
                        </span>
                    </div>
                }
            </div>
            <div class="col-lg-3 col-4">
                @if (PlantInfo.Requirements.ZoneRequirements?.MinimumZone != null || PlantInfo.Requirements.ZoneRequirements?.MaximumZone != null)
                {
                    <div>
                        <label for="zones">Zones</label>
                    </div>
                    <div>
                        <span id="zones">
                            @DisplayRange(PlantInfo.Requirements.ZoneRequirements?.MinimumZone?.Name, PlantInfo.Requirements.ZoneRequirements?.MaximumZone?.Name)
                        </span>
                    </div>
                }
            </div>
            <div class="col-lg-3 col-4">
                @if (PlantInfo.BloomTime.MinimumBloomTime != Month.Unknown || PlantInfo.BloomTime.MaximumBloomTime != Month.Unknown)
                {
                    <div>
                        <label for="bloom">Bloom Times</label>
                    </div>
                    <div>
                        <span id="bloom">
                            @DisplayRange(PlantInfo.BloomTime.MinimumBloomTime.ToFriendlyName(), PlantInfo.BloomTime.MaximumBloomTime.ToFriendlyName())
                        </span>
                    </div>
                }
            </div>
            <div class="col-lg-3 col-4">
                @if (PlantInfo.Height.MinimumHeight.HasValue || PlantInfo.Height.MinimumHeight.HasValue)
                {
                    <div>
                        <label for="height-min">Height</label>
                    </div>
                    <div>
                        <span id="height">
                            @DisplayRange(PlantInfo.Height.MinimumHeight.ToString(), PlantInfo.Height.MaximumHeight.ToString(),
                                            PlantInfo.Height.Unit.ToFriendlyName())
                        </span>
                    </div>
                }
            </div>
            <div class="col-lg-3 col-4">
                @if (PlantInfo.Spread.MinimumSpread.HasValue || PlantInfo.Spread.MaximumSpread.HasValue)
                {
                    <div>
                        <label for="spread">Spread</label>
                    </div>
                    <div>
                        <span id="spread">
                            @DisplayRange(PlantInfo.Spread.MinimumSpread.ToString(),
                                            PlantInfo.Spread.MaximumSpread.ToString(),
                                            PlantInfo.Spread.Unit.ToFriendlyName())
                        </span>
                    </div>
                }
            </div>
            <div class="col-lg-3 col-4">
            </div>
            <div class="col-lg-3 col-4">
            </div>
            <div class="col-lg-5 col">
                @if (PlantInfo.Requirements.StratificationStages != null)
                {
                    <label for="req-scarification">Stratification Stages</label>
                    @foreach (var stage in PlantInfo.Requirements.StratificationStages)
                    {
                        var key = stage.Step.ToString();
                        var firstRow = stage.Step == 1;
                        <div class="row">
                            <div class="col-2">
                                <div class="@(firstRow ? "" : "d-none")">
                                    <label for="@GetElementId("req-scarification-step", key)">Step</label>
                                </div>
                                <div>
                                    <span id="@GetElementId("req-scarification-step", key)">@stage.Step</span>
                                </div>
                            </div>
                            <div class="col-2">
                                <div class="@(firstRow ? "" : "d-none")">
                                    <label for="@GetElementId("req-scarification-days", key)">Days</label>
                                </div>
                                <div>
                                    <span id="@GetElementId("req-scarification-days", key)">@stage.DayLength</span>
                                </div>
                            </div>
                            <div class="col-8">
                                <div class="@(firstRow ? "" : "d-none")">
                                    <label for="@GetElementId("req-scarification-type", key)">Statification Method</label>
                                </div>
                                <div>
                                    <span id="@GetElementId("req-scarification-type", key)">@stage.StratificationType.ToFriendlyName()</span>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="col-lg-4 col">
                @if (PlantInfo.WildlifeEffects != null)
                {
                    var key = 1;

                    <label for="wildlife-effects">Wildlife effects</label>
                    <ul>
                    @foreach (var wildlifeEffect in PlantInfo.WildlifeEffects)
                    {
                        <li>
                            @if (wildlifeEffect.Effect != Effect.Unknown)
                            {
                                <span id="@GetElementId("effect", key.ToString())">@wildlifeEffect.Effect.ToFriendlyName() for </span>
                            }
                            <span id="@GetElementId("wildlife", key.ToString())">@wildlifeEffect.Wildlife</span>
                        </li>
                    }
                    </ul>
                }
            </div>
            <div class="col-lg-3 col">
                @if (PlantInfo.SoilTypes != null)
                {
                    <label for="soil-types">Soil Types</label>
                    <ul>
                        @foreach (var soilType in PlantInfo.SoilTypes)
                        {
                            <li>@soilType</li>
                        }
                    </ul>
                }
            </div>
            <div class="col-lg-12 col">
                @if (PlantInfo.Notes != null)
                {
                    <label for="notes">Notes</label>
                    <p>@PlantInfo.Notes</p>

                }
            </div>
        </div>
    </div>
    @if (UploadedPhotos != null && UploadedPhotos.Any())
    {
        <div class="form-group">
            <ViewPhotos UploadedPhotos="UploadedPhotos" Name="@(PlantInfo.Lifeform.ScientificName)" />
        </div>
    }
}
@code {
    private string DisplayRange(string start, string end, string unit = null)
    {
        string range = null;
        if (string.IsNullOrEmpty(end))
        {
            range = start + unit;
        }
        else if (!string.IsNullOrEmpty(start))
        {
            range = $"{start} - {end + unit}";
        }

        return range;
    }
}

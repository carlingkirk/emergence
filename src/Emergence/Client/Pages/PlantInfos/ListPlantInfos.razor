@page "/plantinfo/list"
@using Emergence.Client.Components

@inherits ListPlantInfosComponent

@if (!IsItemLoaded)
{
    @if (ShowSearch)
    {
        <input type="text" @bind="SearchText" id="search" />
        <button class="btn btn-secondary" @onclick="SearchAsync">Search</button>
    }

    @if (List != null)
    {
        <table>
            <SortableHeaders HeaderNames="@(
                    new Dictionary<string, string>
                    {
                        { "ScientificName", "Scientific Name" },
                        { "CommonName", "Common Name" },
                        { "Origin", "Origin" },
                        { "Zone", "Zone" },
                        { "Light", "Light" },
                        { "Water", "Water" },
                        { "BloomTime", "Bloom Time" },
                        { "Height", "Height" },
                        { "Spread", "Spread" }
                    })"
                             Sort="SortAsync"
                             @bind-Values="List" />
            @if (!List.Any())
            {
                <tr>
                    <td>
                        <span>No plant infos found</span>
                    </td>
                </tr>
            }
            @foreach (var plantInfo in List)
            {
                <tr>
                    <td>
                        <a href="" @onclick="() => LoadInfo(plantInfo.PlantInfoId)" @onclick:preventDefault><span class="link">@plantInfo.Lifeform.ScientificName</span></a>
                    </td>
                    <td>
                        <span>@plantInfo.CommonName</span>
                    </td>
                    <td>
                        <span @onclick="@(async () => await UpdateOriginAsync(plantInfo.Origin))" class="link">@plantInfo.Origin?.Name</span>
                    </td>
                    <td>
                        @if (plantInfo.Requirements?.ZoneRequirements != null)
                        {
                            <span>@plantInfo.Requirements.ZoneRequirements.ToFriendlyString()</span>
                        }
                    </td>
                    <td>
                        @if (plantInfo.Requirements?.LightRequirements != null)
                        {
                            <span>@plantInfo.Requirements.LightRequirements.ToFriendlyString()</span>
                        }
                    </td>
                    <td>
                        @if (plantInfo.Requirements?.WaterRequirements != null)
                        {
                            <span>@plantInfo.Requirements.WaterRequirements.ToFriendlyString()</span>
                        }
                    </td>
                    <td>
                        @if (plantInfo.BloomTime != null)
                        {
                            <span>@plantInfo.BloomTime.ToFriendlyString()</span>
                        }
                    </td>
                    <td>
                        @if (plantInfo.Height != null)
                        {
                            <span>@plantInfo.Height.ToFriendlyString()</span>
                        }
                    </td>
                    <td>
                        @if (plantInfo.Spread != null)
                        {
                            <span>@plantInfo.Spread.ToFriendlyString()</span>
                        }
                    </td>
                </tr>
            }
        </table>
        @if (List.Any())
        {
            <div>
                <Pager Page="PageAsync" @bind-Values="List" Count="@Count" Take="@Take" CurrentPage="@CurrentPage"></Pager>
            </div>
        }
        else if (!string.IsNullOrEmpty(UserId))
        {
        <div>
            <button class="btn btn-primary" @onclick="@(() => LoadInfo(0))"><span class="oi oi-plus btn-oi"></span>Plant Info</button>
        </div>
        }
    }
}
else if (Id > 0 || IsItemLoaded)
{
<PlantInfoViewer @bind-Id="Id" @bind-IsItemLoaded="IsItemLoaded"></PlantInfoViewer>
}

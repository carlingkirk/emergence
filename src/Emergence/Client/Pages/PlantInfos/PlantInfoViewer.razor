@page "/plantinfo/{Id:int}"
@using Emergence.Client.Components

@inherits PlantInfoComponent

<div class="card-header h3">
    @if (!IsModal)
    {
        <button type="button" class="btn btn-primary" @onclick="Back">Back</button>
    }
    <span class="title">Plant Profile: </span>
    @if (PlantInfo != null && (!string.IsNullOrEmpty(ScientificName) || !string.IsNullOrEmpty(CommonName)))
    {
        <span>@CommonName</span><span class="font-italic"> (@ScientificName)</span>
    }
    else
    {
        <span class="font-italic">New</span>
    }
</div>
<div class="group">
    @if (IsEditing && PlantInfo != null)
    {
        @if (RefreshList != null)
        {
            <EditPlantInfo Cancel="GoBack" RefreshList="RefreshList" PlantInfo="PlantInfo" @bind-IsEditing="IsEditing" @bind-IsItemLoaded="IsItemLoaded" @bind-List="List" />
        }
        else
        {
            <EditPlantInfo Cancel="GoBack" PlantInfo="PlantInfo" @bind-IsEditing="IsEditing" @bind-IsItemLoaded="IsItemLoaded" />
        }
    }
    else if (PlantInfo != null)
    {
        <ViewPlantInfo PlantInfo="PlantInfo" @bind-IsEditing="IsEditing" @bind-IsItemLoaded="IsItemLoaded" />
    }
    else
    {
        <span>Loading...</span>
    }

    @if (IsEditable && !IsEditing && PlantInfo != null && PlantInfo.PlantInfoId > 0)
    {
        <button type="button" class="btn btn-primary" @onclick="() => IsEditing = true">Edit</button>
        <button type="button" class="btn btn-primary" @onclick="async () => await RemovePlantInfo()">Delete</button>
    }
</div>

@code {

    protected async Task GoBack()
    {
        if (PlantInfo.PlantInfoId == 0)
        {
            await IsItemLoadedChanged.InvokeAsync(false);
        }
    }

    protected bool IsEditable => !string.IsNullOrEmpty(UserId) && PlantInfo?.CreatedBy == UserId;
}

@using Emergence.Data.Shared
@using Emergence.Data.Shared.Models
@using Emergence.Client.Components
@using Blazored.Typeahead
@inherits MessageComponent

<EditForm Model="@Message" OnValidSubmit="SendMessageAsync">
    <div class="form-group">
        <div class="row">
            <div class="col-12">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div class="col-lg-6 col-xs">
                <label for="user">Recipient</label>
                <BlazoredTypeahead SearchMethod="FindUsersAsync"
                                   @bind-Value="SelectedUser"
                                   MinimumLength="3"
                                   Debounce="500" Context="User">
                    <SelectedTemplate>
                        <span class="text-body">@(User.DisplayName)</span>
                    </SelectedTemplate>
                    <ResultTemplate>
                        <span class="text-body">@(User.DisplayName)</span>
                    </ResultTemplate>
                    <NotFoundTemplate>
                        No results found
                    </NotFoundTemplate>
                </BlazoredTypeahead>
            </div>
            <div class="col-lg-12 col-xs">
                <label for="subject">Subject</label>
                <InputText @bind-Value="@Message.Subject" class="form-control" id="subject" />
            </div>
            <div class="col-lg-12 col-xs">
                <label for="message-body">Message</label>
                <InputTextArea @bind-Value="@Message.MessageBody" class="form-control" id="message-body" style="min-height:8rem;" />
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Send</button>
    @if (BlazoredModal != null)
    {
        <button type="button" @onclick="BlazoredModal.Cancel" class="btn btn-secondary">Cancel</button>
    }
    else
    {
        <button type="button" class="btn btn-secondary" @onclick="async () => await CancelAsync()">Cancel</button>
    }
</EditForm>

@code {
    protected async Task SendMessageAsync()
    {
        Message.User = SelectedUser;

        if (string.IsNullOrEmpty(Message.Subject))
        {
            Message.Subject = "(no subject)";
        }

        var message = await ApiClient.SendMessageAsync(Message);

        if (BlazoredModal != null)
        {
            await BlazoredModal.Close(ModalResult.Ok(message));
        }
        else
        {
            await CancelAsync();
        }
    }

    protected async Task CancelAsync()
    {
        await RefreshListAsync();

        await Cancel.Invoke();
    }

    protected async Task<IEnumerable<UserSummary>> FindUsersAsync(string searchText)
    {
        var result = await ApiClient.FindUsersAsync(new FindParams
        {
            SearchText = searchText,
            Skip = 0,
            Take = 10,
            SortBy = "DisplayName",
            SortDirection = SortDirection.Ascending
        });

        return result.Results;
    }
}
